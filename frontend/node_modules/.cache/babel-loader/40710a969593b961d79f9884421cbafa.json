{"ast":null,"code":"import * as Actions from './actions';\n\nconst initialItems = require('./data/articlelist.json');\n\nconst initialfollower = require('./data/follower.json');\n\nconst initialprofile = require('./data/profile.json');\n\nconst intialState = {\n  players: [],\n  nextPlayer: 'X',\n  series: {\n    xWins: 0,\n    oWins: 0\n  },\n  status: 'Player turn: ',\n  board: Array(9).fill(\"\")\n};\nexport function Reducer(state = intialState, action) {\n  switch (action.type) {\n    // update the tic-tac-toe board\n    case SELECT_SQUARE:\n      if (!state.board[action.id]) {\n        let newBoard = [...state.board];\n        let player = state.nextPlayer;\n        newBoard[action.id] = player;\n        let winner = wonGame(player, newBoard);\n        let nextPlayer = player === \"X\" ? \"O\" : \"X\"; // game over, player wins\n\n        if (winner) {\n          let xWins = state.series.xWins;\n          let oWins = state.series.oWins;\n          if (player === \"X\") xWins++;else oWins++;\n          return { ...state,\n            board: Array(9).fill(''),\n            series: {\n              xWins,\n              oWins\n            },\n            nextPlayer,\n            status: player + ' wins! next: '\n          };\n        } // game over, tie\n        else if (tieGame(newBoard)) {\n            return { ...state,\n              board: Array(9).fill(''),\n              nextPlayer,\n              status: 'Draw, next turn: '\n            };\n          } else {\n            return { ...state,\n              nextPlayer,\n              board: newBoard,\n              status: 'Player turn: '\n            };\n          }\n      }\n\n      break;\n    // request players from the dummy server\n\n    case REQUEST_PLAYERS:\n      return { ...state,\n        players: action.players\n      };\n\n    default:\n      return state;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/Users/alexwan/Documents/GitHub/hw4-BochengWan123/hw4/src/reducers.js"],"names":["Actions","initialItems","require","initialfollower","initialprofile","intialState","players","nextPlayer","series","xWins","oWins","status","board","Array","fill","Reducer","state","action","type","SELECT_SQUARE","id","newBoard","player","winner","wonGame","tieGame","REQUEST_PLAYERS"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,WAAzB;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,yBAAD,CAA5B;;AACA,MAAMC,eAAe,GAACD,OAAO,CAAC,sBAAD,CAA7B;;AACA,MAAME,cAAc,GAACF,OAAO,CAAC,qBAAD,CAA5B;;AAEA,MAAMG,WAAW,GAAG;AAChBC,EAAAA,OAAO,EAAE,EADO;AAEhBC,EAAAA,UAAU,EAAE,GAFI;AAGhBC,EAAAA,MAAM,EAAE;AAACC,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,KAAK,EAAE;AAAlB,GAHQ;AAIhBC,EAAAA,MAAM,EAAE,eAJQ;AAKhBC,EAAAA,KAAK,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,EAAd;AALS,CAApB;AAQA,OAAO,SAASC,OAAT,CAAkBC,KAAK,GAAGX,WAA1B,EAAuCY,MAAvC,EAA+C;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAKC,aAAL;AACI,UAAI,CAACH,KAAK,CAACJ,KAAN,CAAYK,MAAM,CAACG,EAAnB,CAAL,EAA6B;AACzB,YAAIC,QAAQ,GAAG,CAAC,GAAGL,KAAK,CAACJ,KAAV,CAAf;AACA,YAAIU,MAAM,GAAGN,KAAK,CAACT,UAAnB;AACAc,QAAAA,QAAQ,CAACJ,MAAM,CAACG,EAAR,CAAR,GAAsBE,MAAtB;AAEA,YAAIC,MAAM,GAAGC,OAAO,CAACF,MAAD,EAASD,QAAT,CAApB;AACA,YAAId,UAAU,GAAIe,MAAM,KAAK,GAAZ,GAAmB,GAAnB,GAAyB,GAA1C,CANyB,CAQzB;;AACA,YAAIC,MAAJ,EAAY;AACR,cAAId,KAAK,GAAGO,KAAK,CAACR,MAAN,CAAaC,KAAzB;AACA,cAAIC,KAAK,GAAGM,KAAK,CAACR,MAAN,CAAaE,KAAzB;AACA,cAAIY,MAAM,KAAK,GAAf,EACIb,KAAK,GADT,KAGIC,KAAK;AACT,iBAAO,EACH,GAAGM,KADA;AAEHJ,YAAAA,KAAK,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,EAAd,CAFJ;AAEuBN,YAAAA,MAAM,EAAE;AAACC,cAAAA,KAAD;AAAQC,cAAAA;AAAR,aAF/B;AAE+CH,YAAAA,UAF/C;AAGHI,YAAAA,MAAM,EAAEW,MAAM,GAAG;AAHd,WAAP;AAKH,SAZD,CAcA;AAdA,aAeK,IAAIG,OAAO,CAACJ,QAAD,CAAX,EAAuB;AACxB,mBAAO,EACH,GAAGL,KADA;AAEHJ,cAAAA,KAAK,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,EAAd,CAFJ;AAEuBP,cAAAA,UAFvB;AAGHI,cAAAA,MAAM,EAAE;AAHL,aAAP;AAKH,WANI,MAME;AACH,mBAAO,EAAC,GAAGK,KAAJ;AAAWT,cAAAA,UAAX;AAAuBK,cAAAA,KAAK,EAAES,QAA9B;AAAwCV,cAAAA,MAAM,EAAE;AAAhD,aAAP;AACH;AACJ;;AACD;AACJ;;AACA,SAAKe,eAAL;AACI,aAAO,EAAC,GAAGV,KAAJ;AAAWV,QAAAA,OAAO,EAAEW,MAAM,CAACX;AAA3B,OAAP;;AACJ;AACI,aAAOU,KAAP;AA1CR;;AA4CA,SAAOA,KAAP;AACH","sourcesContent":["import * as Actions from './actions'\nconst initialItems = require('./data/articlelist.json')\nconst initialfollower=require('./data/follower.json')\nconst initialprofile=require('./data/profile.json')\n\nconst intialState = {\n    players: [],\n    nextPlayer: 'X',\n    series: {xWins: 0, oWins: 0},\n    status: 'Player turn: ',\n    board: Array(9).fill(\"\")\n};\n\nexport function Reducer( state = intialState, action) {\n    switch (action.type) {\n        // update the tic-tac-toe board\n        case SELECT_SQUARE:\n            if (!state.board[action.id]) {\n                let newBoard = [...state.board];\n                let player = state.nextPlayer;\n                newBoard[action.id] = player;\n\n                let winner = wonGame(player, newBoard);\n                let nextPlayer = (player === \"X\") ? \"O\" : \"X\";\n\n                // game over, player wins\n                if (winner) {\n                    let xWins = state.series.xWins;\n                    let oWins = state.series.oWins;\n                    if (player === \"X\")\n                        xWins++;\n                    else\n                        oWins++;\n                    return {\n                        ...state,\n                        board: Array(9).fill(''), series: {xWins, oWins}, nextPlayer,\n                        status: player + ' wins! next: '\n                    };\n                }\n\n                // game over, tie\n                else if (tieGame(newBoard)) {\n                    return {\n                        ...state,\n                        board: Array(9).fill(''), nextPlayer,\n                        status: 'Draw, next turn: '\n                    };\n                } else {\n                    return {...state, nextPlayer, board: newBoard, status: 'Player turn: '}\n                }\n            }\n            break;\n        // request players from the dummy server\n        case REQUEST_PLAYERS:\n            return {...state, players: action.players};\n        default:\n            return state;\n    }\n    return state;\n}"]},"metadata":{},"sourceType":"module"}